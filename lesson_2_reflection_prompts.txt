What happens when you initialize a repository? Why do you need to do it?

	A git repository of the folder is created.

	To use git to keep track of changes of the folder.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	Staging area is the temporary placeholder to hold file changes that are pending to be committed.
	It differs from the working directory (contains up to date file).
	It differs from the repository (contains all committed changes).

	It is great to be used to make multiple files commits. There are files that are related to one and other to perform the task.
	It is logical to commit the files together.

How can you use the staging area to make sure you have one commit per logical
change?

	I can compare my staging area to my previous commit to see if it makes logical sense.
	I can remove files from the staging area by git reset or git rm --cached <file name>
	I can add files to staging area by git add

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	When experimenting new features that are not 100% consumer ready.
	When the team wants to split up their work, like troubleshooting bugs and developing.
	
	Branches allow people to work on their projects in different 'timelines'. Each timeline is independent from each other.
	However it is possible to merge the branch later on.

How do the diagrams help you visualize the branch structure?
	Diagrams helps me visualize branch structure as it constructs the 'history timeline' in a graphical manner.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
	The branch merges together. All changes made in both branches are committed in the resultant branch.
	Commits are displayed in as usual in accordance to time.
	
What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

	automatic merging is great when there are no conflicts between files of the two branches.
	However if there are conflicts, the merge needs to be supervised.
	Manual merges are great as you know which conflicts that are needed to be resolved before merging.
	However it is tedious to supervise every file of both branches.
	

